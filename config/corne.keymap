/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <175>;
};

&mt {
    quick_tap_ms = <175>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};


/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
                        &kp ESC     &kp Q       &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O       &kp P       &mt GUI LBKT
                        &kp TAB     &kp A       &kp S       &kp D       &kp F       &kp G       &kp H       &kp J       &kp K       &kp L       &kp SEMI    &kp SQT
                        &kp LSHIFT  &kp Z       &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &mt LALT RBKT
                                                                &kp LCTRL   &mo 1       &kp RET     &mt 2 BSPC  &mt RSHFT BSPC &kp LCTRL
            >;
        };

        layer_1 {
            bindings = <
                        &trans      &kp 1       &kp 2       &kp 3       &kp 4       &kp 5       &kp 6       &kp 7       &kp 8       &kp 9       &kp 0       &trans
                        &trans      &trans      &tran       &trans      &trans      &kp LA(INS) &kp HOME    &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &trans
                        &trans      &trans      &trans      &trans      &trans      &kp DEL     &kp END     &kp M       &kp COMMA   &kp DOT     &kp FSLH    &trans
                                                                &trans      &trans      &trans      &trans      &trans         &trans
            >;
        };

        layer_2 {
            bindings = <
                        &trans      &kp APOS    &kp LT      &kp GT       &kp SQT    &kp DOT   &AMPS        &kp EQUAL    &kp LBKT    &kp RBKT    &kp PERCENT &trans
                        &trans      &kp EXCL    &kp MINUS   &kp PLUS     &kp KP_EQUAL &kp HASH &kp PIPE    &kp COLON    &kp LPAR    &kp RPAR    &kp QMARK   &trans
                        &trans      &kp CARET   &kp SLASH   &kp ASTRK    &kp BSLH   &kp GRAVE &kp TILDE    &kp DOLLAR   &kp LBRC    &kp RBRC    &kp AT_SIGN &trans
                                                                &trans      &trans      &trans      &trans      &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
                        &trans       &trans      &kp F1      &kp F2      &kp F3      &kp F4        &kp PSCRN   &kp 7       &kp 8       &kp 9       &kp PLUS          &trans
                        &trans       &trans      &kp F5      &kp F6      &kp F7      &kp F8        &kp SLASH   &kp 4       &kp 5       &kp 6       &kp MINUS         &trans
                        &trans       &trans      &kp F9      &kp F10     &kp F11     &kp F12       &kp DOT     &kp 1       &kp 2       &kp 3       &kp KP_MULTIPLY   &trans
                                                                &trans      &trans      &trans      &trans      &trans         &trans
            >;
        };

        adjust_layer {
            bindings = <
                        &bootloader             &none           &none        &none        &none        &none        &none        &none        &none        &none        &studio_unlock  &bootloader
                        &bt BT_CLR              &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_CLR
                        &ext_power EP_OFF       &kp KP_NUM      &none        &none        &none        &none        &none        &none        &none        &none        &none        &ext_power EP_OFF
                        &none                   &none           &none        &none        &none        &none
            >;
        };
    };
};
